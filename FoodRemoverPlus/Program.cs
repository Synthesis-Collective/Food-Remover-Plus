using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Noggog;
using Mutagen.Bethesda.Plugins;

namespace FoodRemoverPlus
{
    public class Program
    {
        // Define a variable to hold the settings
        static Lazy<Settings> settings = null!;
        
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "FoodRemoverPlus.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            bool myDebug = false;
            
            //Start step 1. Initialize everything and get any user-config settings

            int objsDisabled = 0;
            ModKey falskaarMod = ModKey.FromNameAndExtension("Falskaar.esm");

            //List of Falskaar Location Keywords and their approriate percentages
            Dictionary<string, int> fsLocations = new Dictionary<string, int>
            {
                { "FSLocTypeBanditCamp", settings.Value.chanceCamp },
                { "FSLocTypeDungeon", settings.Value.chanceDungeon },
                { "FSLocTypeGiantCamp", settings.Value.chanceHab },
                { "FSLocTypeHabitationHasInn", settings.Value.chanceShop },
                { "FSLocTypeHabitation", settings.Value.chanceHab },
                { "FSLocTypeDwelling", settings.Value.chanceHab },
                { "FSLocTypeInn", settings.Value.chanceShop },
            };

            //List of problematic Locations that need percentages
            Dictionary<string, int> problemLocationsP = new Dictionary<string, int>
            {
                { "GoldenglowEstateLocation", settings.Value.chanceHab },
                { "DrelasCottageLocation", settings.Value.chanceHab },
                { "SkyHavenTempleLocation", settings.Value.chanceCamp },
                { "ShorsWatchtowerLocation", settings.Value.chanceCamp },
            };

            //List of problematic Locations the should be skipped
            HashSet<String> problemLocationsS = new HashSet<string>
            {
                { "BluePalaceWingLocation" },
                { "HelgenLocation" },
                { "TwilightSepulcherLocation" },
                { "HalloftheVigilantLocation" },
                { "NightingaleHallLocation" },
            };

            Console.WriteLine();
            Console.WriteLine("LocTypeShop: Disabling " + settings.Value.chanceShop + "% of Placed Food Objects");
            Console.WriteLine("LocTypeHabitation: Disabling " + settings.Value.chanceHab + "% of Placed Food Objects");
            Console.WriteLine("LocTypeWealthy: Disabling " + settings.Value.chanceWealthy + "% of Placed Food Objects");
            Console.WriteLine("LocTypeCamps: Disabling " + settings.Value.chanceCamp + "% of Placed Food Objects");
            Console.WriteLine("LocTypeDungeon: Disabling " + settings.Value.chanceDungeon + "% of Placed Food Objects");
            Console.WriteLine("Base: Disabling " + settings.Value.chanceBase + "% of Placed Food Objects");
            Console.WriteLine();

            // Special Locations
            if (settings.Value.specialLocs == null || settings.Value.specialLocs.Count == 0)
            {
                Console.WriteLine("No special locations.");
            }
            else
            {
                Console.WriteLine("LocTypeSpecial locations:");
                foreach (var loc in settings.Value.specialLocs)
                {
                    Console.WriteLine("Location: " + loc.ToString());
                }
            }
            Console.WriteLine("LocTypeSpecial: Disabling " + settings.Value.chanceSpecial + "% of Placed Food Objects");
            Console.WriteLine();

            // Skip/Ignore Locations List
            if (settings.Value.skipLocs == null || settings.Value.skipLocs.Count == 0)
            {
                Console.WriteLine("No Locations to skip.");
                Console.WriteLine("Searching all locations for Placed Food Objects.");
            }
            else
            {
                Console.WriteLine("Not searching for Objects in the following locations:");
                foreach (var loc in settings.Value.skipLocs)
                {
                    Console.WriteLine("Skip Location: " + loc.ToString());
                }
            }
            Console.WriteLine();

            // Skip/Ignore Plugins List
            if (settings.Value.skipPlugins == null || settings.Value.skipPlugins.Count == 0)
            {
                Console.WriteLine("No Plugins to skip.");
                Console.WriteLine("Searching all plugins for Placed Food Objects.");
            }
            else
            {
                Console.WriteLine("Not searching for Objects in the following plugins:");
                foreach (var plugin in settings.Value.skipPlugins)
                {
                    Console.WriteLine("Skip Plugin: " + plugin.ToString());
                }
            }
            Console.WriteLine();

            // Start step 2. Start Placed Object Iteration
            foreach (var placedObject in state.LoadOrder.PriorityOrder.PlacedObject().WinningContextOverrides(state.LinkCache))
            {   
                //If already disabled, skip
                if (placedObject.Record.MajorRecordFlagsRaw == 0x0000_0800) continue;

                var placedObjectRec = placedObject.Record;
                if (placedObjectRec.EditorID == null)
                {
                    string poid = placedObjectRec.Base?.TryResolve(state.LinkCache)?.EditorID ?? "NULL ID";
                    
                    // Try to find the base object record, skip if null or not found
                    if (!placedObject.Record.Base.TryResolve<IIngestibleGetter>(state.LinkCache, out var placedObjectBase))
                        continue;

                    // Check if it's EDID contains "Food", skip if EDID null or does not contain "Food"
                    if (placedObjectBase.EditorID == null || !placedObjectBase.EditorID.ContainsInsensitive("Food"))
                        continue;

                    // Try to find the parent cell, skip if null or not found
                    if (!placedObject.TryGetParent<ICellGetter>(out var parentCell)) continue;

                    // Find if parent cell is in users list of plugins to skip
                    if (settings.Value.skipPlugins != null && parentCell.FormKey.ModKey != null
                        && settings.Value.skipPlugins.Contains(parentCell.FormKey.ModKey)) continue;

                    // Find the cell's location record, if null or not found, use Tamrial Location
                    if (!parentCell.Location.TryResolve(state.LinkCache, out var placedObjectLocation))
                    {
                        placedObjectLocation = new Location(FormKey.Factory("0130FF:Skyrim.esm"), SkyrimRelease.SkyrimSE);
                    }
                    
                    // Find if location is in list of locations to skip
                    if (placedObjectLocation.EditorID == null || problemLocationsS.Contains(placedObjectLocation.EditorID)) continue;

                    // Check if location is in users list of locations to skip
                    if (settings.Value.skipLocs != null && placedObjectLocation.EditorID != null
                        && settings.Value.skipLocs.Contains(placedObjectLocation)) continue;

                    // Ensure the cell location has keywords, skip if it doesn't
                    //if (placedObjectLocation.Keywords == null) continue;

                    // If "Remove Owned Food" setting is False, AND food is owned then skip (Idea courtesy of Glanzer-modder)
                    if (placedObject.Record.Owner != null 
                        && placedObject.Record.Owner.ToString() != "Null" 
                        && !settings.Value.removeOwned) continue;
                    
                    // If food is placed programatically then skip (Idea and code courtesy of Glanzer-modder)
                    if (placedObject.Record.EnableParent != null) continue;

                    //Start disabling step
                    //Start at base chance
                    int removalChance = settings.Value.chanceBase;

                    if (placedObjectLocation.Keywords != null)
                    {
                        //Set the removal chance based on location type keyword
                        var locationKeywords = placedObjectLocation.Keywords;

                        // Check for special locations
                        if (settings.Value.specialLocs != null && placedObjectLocation.EditorID != null
                            && settings.Value.specialLocs.Contains(placedObjectLocation))
                        {
                            removalChance = settings.Value.chanceSpecial;
                        }
                        // Check for house with LocTypeWealthy Locations
                        else if (locationKeywords.Contains(Skyrim.Keyword.LocTypeHouse))
                        {
                            removalChance = (locationKeywords.Contains(Skyrim.Keyword.TGWealthyHome)
                                ? settings.Value.chanceWealthy : settings.Value.chanceHab);
                        }
                        // Check for Palace Locations
                        else if (locationKeywords.Contains(Skyrim.Keyword.LocTypeCastle))
                        {
                            removalChance = settings.Value.chanceWealthy;
                        }
                        // Check for LocTypeHab Locations
                        else if (locationKeywords.Contains(Skyrim.Keyword.LocTypeDwelling)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeHabitation)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeTemple)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeShip)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeGiantCamp)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeHagravenNest))
                        {
                            removalChance = (placedObjectLocation.EditorID == "KatariahLocation" 
                                ? settings.Value.chanceWealthy : settings.Value.chanceHab);
                        }
                        // Check for LocTypeShop Locations
                        else if (locationKeywords.Contains(Skyrim.Keyword.LocTypeStore)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeInn)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeFarm))
                        {
                            removalChance = settings.Value.chanceShop;
                        }
                        // Check for LocTypeCamp Locations
                        else if (locationKeywords.Contains(Skyrim.Keyword.LocTypeMilitaryCamp)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeMilitaryFort)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeBarracks)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeBanditCamp)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeForswornCamp)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeWarlockLair)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeMine)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeJail)
                            || locationKeywords.Contains(Skyrim.Keyword.LocSetMilitaryFort))
                        {
                            removalChance = settings.Value.chanceCamp;
                        }
                        // Check for LocTypeDungeons Locations
                        else if (locationKeywords.Contains(Skyrim.Keyword.LocTypeDungeon)
                            || locationKeywords.Contains(Skyrim.Keyword.LocSetCave)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeAnimalDen)
                            || locationKeywords.Contains(Skyrim.Keyword.LocSetDwarvenRuin)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeDraugrCrypt)
                            || locationKeywords.Contains(Skyrim.Keyword.LocSetNordicRuin)
                            || locationKeywords.Contains(Skyrim.Keyword.LocTypeVampireLair))
                        {
                            removalChance = settings.Value.chanceDungeon;
                        }
                        // Check for problematic locations
                        else if (placedObjectLocation.EditorID != null 
                            && problemLocationsP.TryGetValue(placedObjectLocation.EditorID, out int plChance))
                        {
                            removalChance = plChance;
                        }
                        // Check if Falskaar mod is present and use Falskaar LocTypes if it is
                        else if (state.LoadOrder.ContainsKey(falskaarMod))
                        {
                            // Check for Falskaar locations
                            foreach (var locType in locationKeywords)
                            {

                                //Falskaar location types
                                if (!locType.TryResolve(state.LinkCache, out var locTypeRec)) continue;
                                if (locTypeRec.EditorID == null) continue;
                                if (fsLocations.TryGetValue(locTypeRec.EditorID, out int fsChance))
                                {
                                    removalChance = fsChance;
                                    break;
                                }
                            }
                        }
                    }
                    //Start step 3. Disable/Remove the placed food object       
                    //If RND < removal chance, copy as override into new plugin and set to initially disabled
                    Random rnd = new Random();
                    
                    if (rnd.Next(100) < removalChance)
                    {
                        if (!myDebug)
                        {
                            IPlacedObject modifiedObject = placedObject.GetOrAddAsOverride(state.PatchMod);
                            modifiedObject.MajorRecordFlagsRaw |= 0x0000_0800;
                        }
                        objsDisabled++;
                    }
                    else if (settings.Value.changeOwnership)
                    {
                        if (!myDebug)
                        {
                            IPlacedObject modifiedObject = placedObject.GetOrAddAsOverride(state.PatchMod);
                            if (parentCell.Owner != null && parentCell.Owner.ToString() != "Null")
                            {
                                // If Cell Owner is Valid (!null)
                                modifiedObject.Owner.SetTo(parentCell.Owner);
                            }
                            else
                            {
                                // If Cell Owner is null, set ownership to dummy faction
                                var powner = new Faction(FormKey.Factory("10E4FE:Skyrim.esm"), SkyrimRelease.SkyrimSE);
                                modifiedObject.Owner.SetTo(powner);
                            }
                        }
                    }
                }
            }
            Console.WriteLine(objsDisabled + " Placed Food Objects Disabled");


            // Remove Food Effects
            // Was asked to add this in, but don't remember by who or why. Can not get to work anyway
            // have decided it's no longer worth the effort. Will revist later if a need arises again.

            // if (settings.Value.removeEffects || settings.Value.removeFFFood || settings.Value.removeFFDrink)
            // {
            //     Console.WriteLine("Removing non-alchemical effects from Food items");
            //     int itmsPatched = 0;

            //     foreach (var ingestible in state.LoadOrder.PriorityOrder.WinningOverrides<IIngestibleGetter>())
            //     {
            //         string ingestibleEditorID = ingestible.EditorID ?? "";

            //         if (ingestibleEditorID.ContainsInsensitive("Food"))
            //         {
            //             // It's Food
            //             // Create Override Record
            //             Ingestible modifiedIngestible = state.PatchMod.Ingestibles.GetOrAddAsOverride(ingestible);
            //             itmsPatched++;

            //             // Make a copy of all Effects the item currently has
            //             var effects = modifiedIngestible.Effects.ToList();

            //             // Clear all Effects
            //             modifiedIngestible.Effects.Clear();

            //             // For each Effect in the copy, add it back if appropriate.
                        
            //             foreach (var effect in effects)
            //             {                            
            //                 string eeid = effect.BaseEffect?.TryResolve(state.LinkCache)?.EditorID ?? "NotFound";
            //                 if (eeid.ContainsInsensitive("Food"))
            //                 {
            //                     if (!settings.Value.removeEffects) modifiedIngestible.Effects.Add(effect);
            //                 }
            //                 else if (eeid.StartsWith("_Frost_FoodBuff"))
            //                 {
            //                     if (!settings.Value.removeFFFood) modifiedIngestible.Effects.Add(effect);
            //                 }
            //                 else if (eeid.StartsWith("_Frost_DrinkEffect"))
            //                 {
            //                     if (!settings.Value.removeFFDrink) modifiedIngestible.Effects.Add(effect);
            //                 }
            //                 else if (effect != null)
            //                 {
            //                     modifiedIngestible.Effects.Add(effect);
            //                 }
            //             }
            //         }
            //     }
            //     Console.WriteLine("Removed alchemical effects from " + itmsPatched + " Food items");
            // }
        }
    }
}
